;;
; Si4010 time delay functions
;
; Target: si4010
; MIPS: 25
; Compiler: Keil
;
; Copyright (c) 2014, David Imhoff <dimhoff_devel@xs4all.nl>
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the author nor the names of its contributors may
;       be used to endorse or promote products derived from this software
;       without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
; EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
$INCLUDE (si4010.inc)

NAME    TIMING_SI4010

;TODO: maybee set Si4010 clock to max./min. when running this timing loop to
;      be independent of clock speed setting and save energy

;;
; Wait 1 us
;
; Changes: 
;
?PR?wait_1us?TIMING_SI4010   SEGMENT CODE
	PUBLIC wait_1us
	RSEG   ?PR?wait_1us?TIMING_SI4010
	USING  0

wait_1us:
; wanted: 24c
; lcall = 4c
	orl	ACC, #0			; 3c
	orl	ACC, #0			; 3c
	orl	ACC, #0			; 3c
	orl	ACC, #0			; 3c
	orl	ACC, #0			; 3c
	ret				; 5c

;;
; Wait 5 us
;
; Changes: 
;
?PR?wait_5us?TIMING_SI4010   SEGMENT CODE
	PUBLIC wait_5us
	RSEG   ?PR?wait_5us?TIMING_SI4010
	USING  0

wait_5us:
; wanted: 120c
; lcall = 4c
	push	ACC			; 2c
	mov	ACC, #26		; 3c
wait_5us_loop:
	djnz	ACC, wait_5us_loop	; 4c/3c
	nop				; 1c
	pop	ACC			; 2c
	ret				; 5c

;;
; void wait_10us(uint8_t times)
;
; Wait 'n' * 10 us
;
; Changes: 
;
?PR?_wait_10us?TIMING_SI4010   SEGMENT CODE
	PUBLIC _wait_10us
	RSEG   ?PR?_wait_10us?TIMING_SI4010
	USING  0

_wait_10us:
; mov R7 + lcall =			  6c
	push	ACC			; 2c

; First run compensate for call overhead
	mov	ACC, #55		; 3c
_wait_10us_loop0:
	djnz	ACC, _wait_10us_loop0	; 4c/3c

	djnz	R7, _wait_10us_more	; 3c/2c
	nop				; 1c
	pop	ACC			; 2c
	ret				; 5c
	
; Subsequential runs
;--- 1 time 10us = 240c {
_wait_10us_more:
	mov	ACC, #58		; 3c
_wait_10us_loop:
	djnz	ACC, _wait_10us_loop	; 4c/3c
	nop				; 1c
	orl	A, #0			; 2c
	djnz	R7, _wait_10us_more	; 3c/2c
	nop				; 1c
;---}

	pop	ACC			; 2c
	ret				; 5c

	END
